}
df[1:length(df$title),]
}
go <- function() {
links <- crawler(2, url, path)
df <- parser(links, 100)
}
links = crawler(2, "https://www.finextra.com", "https://www.finextra.com/newsarticle", n = 500)
links = crawler(2, "https://www.finextra.com", "/newsarticle", n = 500)
links = crawler(2, "https://www.finextra.com", "/newsarticle")
links = crawler(3, "https://www.finextra.com", "/newsarticle")
df = parser(links, step = 5)
View(df)
df = NULL
df = parser(links, step = 5)
debugSource('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
install.packages("Rcrawler")
install.packages("rvest")
install.packages("tm")
install.packages("beepr")
debugSource('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
links = crawler(3, "https://www.finextra.com", "/newsarticle")
library(Rcrawler)
library(rvest)
library(tm)
library(beepr)
url = "https://www.finextra.com"
path = "/newsarticle"
#Link Extraction
extractor = function(page) {
pageLinks = ""
tryCatch({
html = read_html(url(page, "rb"))
nodes = html_nodes(html, "a")
pageLinks = html_attr(nodes, 'href')
}, error = function(err) {
print(err)
print(page)
})
closeAllConnections()
return(pageLinks)
}
#Crawler
crawler <- function(iterations, url, path, step = 10, n = 100) {
links <- list(url)
scannedLinks <- c()
for (i in 0:iterations) {
tmp <- links
for (j in seq.int(length(links))) {
if (length(scannedLinks)%%step == 0 ) {
print(sprintf("%s/%s : %s/%s", i, iterations, length(scannedLinks), n))
}
if (length(scannedLinks) >= n) {
break
}
link <- links[[j]]
if (!(link %in% scannedLinks)) {
pageLinks <- extractor(link)
pageLinks = pageLinks[which(startsWith(pageLinks, path))]
pageLinks = lapply(pageLinks, function(x) {
paste(url, x, sep = "")
})
tmp <- c(tmp, pageLinks)
scannedLinks <- c(scannedLinks, link)
}
}
links <- unique(tmp)
}
if (!startsWith(url, path)) {
links[1] <- NULL
}
links <- lapply(links, function(x) as.character(x))
links = unlist(links)
links
}
#Parser
selector <-   ".left.fullWidth:not(.left.fullWidth.upper.fontColorOne),
.ncMetaDataSnippet,
#ctl00_ctl00_ConMainBody_ConMainBody_ctl01_lblInfo,
#twitterResult,
#liResult,
#fbResult,
#reResult,
#goResult,
#emResult"
months <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
parser <- function(links, limit = 0, step = 1, beep = T) {
startTime <- as.integer(Sys.time())
df <- data.frame(url = unlist(links))
# df$twitter <- NA
# df$linkedin <- NA
# df$facebook <- NA
# df$reddit <- NA
# df$google <- NA
# df$mail <- NA
df$social = NA
df$title  = NA
df$postTags = NA
df$time = NA
if (limit == 0) {
l <- length(links)
} else {
l <- limit
}
time <- Sys.time()
for(i in seq.int(l)) {
link <- links[[i]]
html <- read_html(link)
data <- html_text(html_nodes(html, selector))
#Social networks
df$social[i] = sum(data[1:6])
# df$twitter[i] <- as.integer(data[1])
# df$linkedin[i] <- as.integer(data[2])
# df$facebook[i] <- as.integer(data[3])
# df$reddit[i] <- as.integer(data[4])
# df$google[i] <- as.integer(data[5])
# df$mail[i] <- as.integer(data[6])
#Title
df$title[i] <- data[6]
#Tags
if (length(data) > 8) {
df$postTags[i] <- paste(data[9:length(data)], collapse = ",")
}
#Stats
stats <- unlist(strsplit(data[8], "[[:space:]]"))
#Views
df$views[i] <- as.integer(stats[7])
#Comments
df$comments[i] <- as.integer(stats[12])
#Time
timestamp <- as.integer(Sys.time())
if (stats[2] == "hours" || stats[2] == "hour") {
hours <- as.integer(stats[1])
df$time[i] <- time - hours * 3600
} else if (stats[2] == "minutes" || stats[2] == "minute") {
minutes <- as.integer(stats[1])
df$time[i] <- time - minutes * 60
} else {
year <- as.integer(stats[3])
month <- which(months == stats[2])
day <- as.integer(stats[1])
date <- ISOdate(year, month, day)
df$time[i] <- as.integer(date)
}
#Progress information
if (i %% step == 0) {
avgTime <- (as.integer(Sys.time()) - startTime) / i
remainingTime <- avgTime * (l-i)
seconds <- round(remainingTime %% 60)
minutes <- round((remainingTime - seconds) / 60)
progress_bar <- paste(c("[", lapply(seq.int(25), function(x, progress) {
if (x <= progress) {
"#"
} else {
" "
}
}, round(i/l*25)), "] "), sep = "", collapse = "")
stepindicator <- sprintf("%s/%s", i, l)
timeEstimate <- sprintf(" (%s minutes %s seconds)", minutes, seconds)
print(paste(c( progress_bar, stepindicator, timeEstimate), sep = " ", collapse = ""))
}
}
df <- subset(df, !is.na(title))
df$id <- seq.int(length(df$url))
if (beep) {
beep()
}
df[1:length(df$title),]
}
go <- function() {
links <- crawler(2, url, path)
df <- parser(links, 100)
}
links = crawler(3, "https://www.finextra.com", "/newsarticle")
df = parser(links, step = 5)
debugSource('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
df = parser(links, step = 5)
data[6]
data[1:6]
sum(data[6])
sum(as.numeric(data[1:6]))
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
df = parser(links, step = 5)
View(df)
unqiue(df$postTags)
unique(df$postTags)
flatten(df$postTags)
unlist(df$postTags)
name = "jel"
test = data.frame(x = c(1,2,3), y = c(2,3,4))
test
name = c("jel", "iel")
df[[title]]
df[title]
df$title
View(df)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
df[,"title"]
name = "oi"
df[,name] == list(0)
dim(df)
df(df)[1]
dim(df)[1]
df2 = df
df2 = boolTags(df2)
boolTags = function(df) {
knowntags = c()
for (i in df$id) {
postTags = strsplit(df$postTags[i], ",")
for (j in seq.int(length(postTags))) {
if (!(postTags %in% knownTags)) {
knownTags = c(knownTags, postTags)
column = data.frame(
value = rep(list(F),dim(df)[1])
)
column[i] = T
colnames(column) = postTags[j]
df = cbind(df, column)
} else {
df[,postTags[j]][i] = T
}
}
}
df
}
df2 = boolTags(df2)
df2 = boolTags(df2)
boolTags = function(df) {
knownTags = c()
for (i in df$id) {
postTags = strsplit(df$postTags[i], ",")
for (j in seq.int(length(postTags))) {
if (!(postTags %in% knownTags)) {
knownTags = c(knownTags, postTags)
column = data.frame(
value = rep(list(F),dim(df)[1])
)
column[i] = T
colnames(column) = postTags[j]
df = cbind(df, column)
} else {
df[,postTags[j]][i] = T
}
}
}
df
}
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
df[,"url"][1] = "test"
df2[,"url"][1] = "test"
tags = unique(unlist(lapply(df$postTags, function(x) strsplit(x, sep = ","))))
tags = unique(unlist(lapply(df$postTags, function(x) strsplit(x, ","))))
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags(df2)
View(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags = function(df) {
tagList = unique(unlist(lapply(df$postTags, function(x) strsplit(x, ","))))
message("Acquired tag list.")
glimpse(tagList)
counter = 0
lapply(tagList, function(tag) {
message(sprintf("%s / %s", counter, length(tagList)))
column = rep(list(F), dim(df)[1])
for (i in df$id) {
column[i] = tag %in% strsplit(df$postTags[i], ",")
}
column = data.frame(column)
colnames(column) = tag
cbind(df, column)
})
df
}
boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags(df2)
boolTags = function(df) {
tagList = unique(unlist(lapply(df$postTags, function(x) strsplit(x, ","))))
message("Acquired tag list.")
counter = 0
lapply(tagList, function(tag) {
message(sprintf("%s / %s", counter, length(tagList)))
column = rep(list(F), dim(df)[1])
for (i in df$id) {
column[i] = tag %in% strsplit(df$postTags[i], ",")
}
column = data.frame(column)
colnames(column) = tag
cbind(df, column)
counter += 1
})
df
}
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags = function(df) {
tagList = unique(unlist(lapply(df$postTags, function(x) strsplit(x, ","))))
message("Acquired tag list.")
counter = 0
lapply(tagList, function(tag) {
message(sprintf("%s / %s", counter, length(tagList)))
column = rep(list(F), dim(df)[1])
for (i in df$id) {
column[i] = tag %in% strsplit(df$postTags[i], ",")
}
column = data.frame(column)
colnames(column) = tag
cbind(df, column)
counter = counter + 1
})
df
}
boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags(df2)
glimpse
glimpse(df)
library(dplyr)
head(df)
head(df[,-url])
head(df[,-c(url)])
head(df[,-c("url")])
head(subset(df, select = -url))
df2 = boolTags(df2)
df2 = subset(df2, select = -url)
df2 = boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
df2 = df
df2 = subset(df2, select = -url)
df2 = boolTags(df2)
debugSource('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
View(column)
df2 = boolTags(df2)
View(column)
debugSource('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
debugSource('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
View(column)
View(column)
test = data.frame(column)
test = data.frame(unlist(column))
debugSource('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
View(column)
View(column)
df2 = boolTags(df2)
View(column)
ta
tag
strsplit(df$postTags[52], ",")
tag %in% strsplit(df$postTags[1], ",")
tag %in% strsplit(df$postTags[2], ",")
tag %in% strsplit(df$postTags[3], ",")
View(df)
strsplit(df$postTags[1], ",")
strsplit(df$postTags[1], ",")[1]
strsplit(df$postTags[1], ",")[[1]]
strsplit(df$postTags[1], ",")[1][1]
strsplit(df$postTags[1], ",")[[1]][1]
test = strsplit(df$postTags[1], ",")
test2 = strsplit(df$postTags[1], ",")[[1]]
test
test2
tag
tag %in% test
tag %in% test2
debugSource('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
View(column)
df2 = boolTags(df2)
View(df2)
df = parser(links, step = 5)
debugSource('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
data[•7]
data[7]
df = parser(links, step = 5)
splitstr(df$postTags, ",")
strsplit(df$postTags, ",")
unlist(strsplit(df$postTags, ","))
table(unlist(strsplit(df$postTags, ",")))
table(unlist(strsplit(df$postTags, ","))) -> test
View(test)
test$freq
test[freq]
test["Freq"]
test[1]
test[2]
test[1][1]
data.frame(test)
test = data.frame(test)
test$Freq
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags = function(df) {
table = table(unlist())
table = strsplit(df$postTags, ",") %>% unlist() %>% table() %>% data.frame()
table = table[order(table$Freq)]
tagList = table[1:15]
message(sprintf("Acquired tag list of length %s.", length(tagList)))
for (i in seq.int(length(tagList))) {
tag = tagList[i]
message(sprintf("%s / %s", i, length(tagList)))
column = list()
for (j in df$id) {
column[j] = tag %in% strsplit(df$postTags[j], ",")[[1]]
}
column = data.frame(unlist(column))
colnames(column) = tag
df = cbind(df, column)
}
df
}
boolTags()
df2 = df
df2 = boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags = function(df) {
table = table(unlist())
table = strsplit(df$postTags, ",") %>%
unlist() %>%
table() %>%
data.frame()
table = table[order(table$Freq)]
tagList = table[1:15]
message(sprintf("Acquired tag list of length %s.", length(tagList)))
for (i in seq.int(length(tagList))) {
tag = tagList[i]
message(sprintf("%s / %s", i, length(tagList)))
column = list()
for (j in df$id) {
column[j] = tag %in% strsplit(df$postTags[j], ",")[[1]]
}
column = data.frame(unlist(column))
colnames(column) = tag
df = cbind(df, column)
}
df
}
df2 = boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
View(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
boolTags = function(df) {
tagData = unlist(strsplit(df$postTags, ","))
tagData = data.frame(table(tagData))
tagData = tagData[order(tagData$Freq),]
tagList = tagData$Var1[1:15]
message(sprintf("Acquired tag list of length %s.", length(tagList)))
for (i in seq.int(length(tagList))) {
tag = tagList[i]
message(sprintf("%s / %s", i, length(tagList)))
column = list()
for (j in df$id) {
column[j] = tag %in% strsplit(df$postTags[j], ",")[[1]]
}
column = data.frame(unlist(column))
colnames(column) = tag
df = cbind(df, column)
}
df
}
df2 = boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
View(df2)
table(df2)
test = unlist(strsplit(df2$postTags, ","))
test = table(test)
test = data.frame(test)
View(test)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/BoolTags.R')
df2 = boolTags(df2)
df2 = fd
df2 = df
df2 = boolTags(df2)
View(df2)
