theme(text = element_text(size=20))
corrr_analysis %>%
ggplot(aes(x = views, y = fct_reorder(feature, desc(views)))) +
geom_point() +
# Positive Correlations - Contribute to churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
geom_point(color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
# Negative Correlations - Prevent churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
geom_point(color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
# Vertical lines
geom_vline(xintercept = 0, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = -0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = 0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
# Aesthetics
theme_tq() +
labs(title = "Churn Correlation Analysis",
subtitle = "Positive Correlations (contribute to churn), Negative Correlations (prevent churn)",
y = "Feature Importance") +
theme(text = element_text(size=5))
theme(text = element_text(size=5))
theme(text = element_text(size=20))
theme(text = element_text(size=20))
# Correlation visualization
corrr_analysis %>%
ggplot(aes(x = views, y = fct_reorder(feature, desc(views)))) +
geom_point() +
# Positive Correlations - Contribute to churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
geom_point(color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
# Negative Correlations - Prevent churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
geom_point(color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
# Vertical lines
geom_vline(xintercept = 0, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = -0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = 0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
# Aesthetics
theme_tq() +
labs(title = "Churn Correlation Analysis",
subtitle = "Positive Correlations (contribute to churn), Negative Correlations (prevent churn)",
y = "Feature Importance") +
theme(text = element_text(size=8))
# Correlation visualization
corrr_analysis %>%
ggplot(aes(x = views, y = fct_reorder(feature, desc(views)))) +
geom_point() +
# Positive Correlations - Contribute to churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
geom_point(color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
# Negative Correlations - Prevent churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
geom_point(color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
# Vertical lines
geom_vline(xintercept = 0, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = -0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = 0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
# Aesthetics
theme_tq() +
labs(title = "Churn Correlation Analysis",
subtitle = "Positive Correlations (contribute to churn), Negative Correlations (prevent churn)",
y = "Feature Importance") +
theme(text = element_text(size=5)
)
# Correlation visualization
corrr_analysis %>%
ggplot(aes(x = views, y = fct_reorder(feature, desc(views)))) +
geom_point() +
# Positive Correlations - Contribute to churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
geom_point(color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
# Negative Correlations - Prevent churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
geom_point(color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
# Vertical lines
geom_vline(xintercept = 0, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = -0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = 0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
# Aesthetics
theme_tq() +
labs(title = "Churn Correlation Analysis",
subtitle = "Positive Correlations (contribute to churn), Negative Correlations (prevent churn)",
y = "Feature Importance") +
theme(text = element_text(size=8))
ggplot(aes(x = views, y = fct_reorder(feature, desc(views)))) +
geom_point() +
# Positive Correlations - Contribute to churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
geom_point(color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
# Negative Correlations - Prevent churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
geom_point(color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
# Vertical lines
geom_vline(xintercept = 0, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = -0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = 0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
# Aesthetics
theme_tq() +
labs(title = "Keywords Correlation Analysis",
subtitle = "Positive Correlations (more views), Negative Correlations (less views)",
y = "Feature Importance") +
theme(text = element_text(size=8))
# Correlation visualization
corrr_analysis %>%
ggplot(aes(x = views, y = fct_reorder(feature, desc(views)))) +
geom_point() +
# Positive Correlations - Contribute to churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
geom_point(color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
# Negative Correlations - Prevent churn
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
geom_point(color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
# Vertical lines
geom_vline(xintercept = 0, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = -0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = 0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
# Aesthetics
theme_tq() +
labs(title = "Churn Correlation Analysis",
subtitle = "Positive Correlations (contribute to churn), Negative Correlations (prevent churn)",
y = "Feature Importance") +
theme(text = element_text(size=8))
# Correlation visualization
corrr_analysis %>%
ggplot(aes(x = views, y = fct_reorder(feature, desc(views)))) +
geom_point() +
# Positive Correlations - more views
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
geom_point(color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
# Negative Correlations - less views
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
geom_point(color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
# Vertical lines
geom_vline(xintercept = 0, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = -0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = 0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
# Aesthetics
theme_tq() +
labs(title = "Keywords/Views Correlation Analysis",
subtitle = "Positive Correlations (more views), Negative Correlations (less views)",
y = "Feature Importance") +
theme(text = element_text(size=8))
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/WebCrawler.R')
write.csv(df, "/Final/data.csv")
write.csv(df, "data.csv")
write.csv(df, "Final/data.csv")
write.csv(df, "Skaizen/Final/data.csv")
selectors = list()
selectors[["titre"]] = "#title"
selectors
selectors[["tags"]] = ".tag"
selectors
selectors$tags
seletors[["tags"]]
selectors[["tags"]]
save.image("C:/Users/robin/Desktop/workspace/GitHub/Skaizen/datasets/dataset4.RData")
setwd("C:/Users/robin/Desktop/workspace/GitHub/Skaizen")
load("C:/Users/robin/Desktop/workspace/GitHub/Skaizen/Final/data.csv")
df = read.csv("Finale/data.csv")
df = read.csv("Final/data.csv")
View(df)
load("C:/Users/robin/Desktop/workspace/GitHub/Skaizen/datasets/dataset4.RData")
csv.write("df2.csv", df2)
write.csv("df2.csv", df2)
write.csv(df2, "df2.csv")
View(df2)
df = df2
tagList <- unique(unlist(strsplit(df$postTags, ",")))
tagList
tagdf <- data.frame()
lapply(tagList, function(tag){
column <- lapply(df$postTags, function(postTags){
ifelse(tag %in% strsplit(postTags, ","), 1, 0)
})
tagdf <- cbind(tagdf, column)
})
tag <- tagList[1]
column <- lapply(df$postTags, function(postTags){
ifelse(tag %in% strsplit(postTags, ","), 1, 0)
})
column
tag
postTags <- df$postTags[1]
column <- lapply(df$postTags, function(postTags){
ifelse(tag %in% strsplit(postTags, ","), 1, 0)
})
column
tag
postTags
strsplit(postTags, ",")
tag %in% strsplit(postTags, ",")
list <- strsplit(postTags, ",")
tag
list[1]
column <- lapply(df$postTags, function(postTags){
ifelse(tag %in% unlist(strsplit(postTags, ",")), 1, 0)
})
column
#Identifying tags
tagList <- unique(unlist(strsplit(df$postTags, ",")))
tagdf <- data.frame()
lapply(tagList, function(tag){
column <- lapply(df$postTags, function(postTags){
ifelse(tag %in% unlist(strsplit(postTags, ",")), 1, 0)
})
tagdf <- cbind(tagdf, column)
})
column <- lapply(df$postTags, function(postTags){
ifelse(tag %in% unlist(strsplit(postTags, ",")), 1, 0)
})
column
unlist(column)
#Identifying tags
tagList <- unique(unlist(strsplit(df$postTags, ",")))
tagdf <- data.frame()
lapply(tagList, function(tag){
column <- unlist(lapply(df$postTags, function(postTags){
ifelse(tag %in% unlist(strsplit(postTags, ",")), 1, 0)
}))
tagdf <- cbind(tagdf, column)
})
#Identifying tags
tagList <- unique(unlist(strsplit(df$postTags, ",")))
tagdf <- NULL
lapply(tagList, function(tag){
column <- unlist(lapply(df$postTags, function(postTags){
ifelse(tag %in% unlist(strsplit(postTags, ",")), 1, 0)
}))
if (is.null(tagdf)) {
tagdf <- data.frame(column)
} else {
tagdf <- cbind(tagdf, column)
}
})
#Identifying tags
tagList <- unique(unlist(strsplit(df$postTags, ",")))
tagdf <- data.frame(lapply(tagList, function(tag){
unlist(lapply(df$postTags, function(postTags){
ifelse(tag %in% unlist(strsplit(postTags, ",")), 1, 0)
}))
}))
View(tdm)
View(tagdf)
tagdf <- data.frame(lapply(tagList, function(tag){
unlist(lapply(df$postTags, function(postTags){
ifelse(tag %in% unlist(strsplit(postTags, ",")), 1, 0)
}))
}), ncol = length(tagList))
View(tagdf)
colnames(tagdf) <- tagList
tagdf <- data.frame(lapply(tagList, function(tag){
unlist(lapply(df$postTags, function(postTags){
ifelse(tag %in% unlist(strsplit(postTags, ",")), 1, 0)
}))
}))
colnames(tagdf) <- tagList
length(tagList)
View(tagdf)
df <- cbind(df, tagdf)
df = df2
df <- preprocessing(df)
library(tm)
library(SnowballC)
preprocessing <- function(df) {
df <- select(df, c("views", "text", "time"))
#Identifying keywords
docs = Corpus(VectorSource(df$text))
docs = tm_map(docs, removePunctuation)
docs = tm_map(docs, removeNumbers)
docs = tm_map(docs, tolower)
docs = tm_map(docs, removeWords, stopwords("english"))
docs = tm_map(docs, stripWhitespace)
docs = tm_map(docs, stemDocument)
dtm = DocumentTermMatrix(docs)
dtmdf = data.frame(as.matrix(dtm))
freq = colSums(as.matrix(dtm))
dtmdf = dtmdf[,order(freq, decreasing = T)[1:128]]
dtmdf[] = lapply(dtmdf, function(x) ifelse(x>0, 1, 0))
colnames(dtmdf) = paste("word_", colnames(dtmdf), sep = "")
df = cbind(df, dtmdf)
#Identifying tags
tagList <- unique(unlist(strsplit(df$postTags, ",")))
tagdf <- NULL
tagdf <- data.frame(lapply(tagList, function(tag){
unlist(lapply(df$postTags, function(postTags){
ifelse(tag %in% unlist(strsplit(postTags, ",")), 1, 0)
}))
}))
colnames(tagdf) <- tagList
df <- cbind(df, tagdf)
#Identifying week days
wdays = as.POSIXlt(df$time, origin = "1970-01-01")$wday
wdaydf <- data.frame(to_categorical(wdays, 7))
colnames(wdaydf) <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
df <- cbind(df, wdaydf)
select(df, -c("text", "time"))
}
df <- preprocessing(df)
df <- preprocessing(df)
library(dplyr)
df <- preprocessing(df)
strsplit(df$postTags, ",")
tagList <- unique(unlist(strsplit(df$postTags, ",")))
df = df2
tagList <- unique(unlist(strsplit(df$postTags, ",")))
df <- preprocessing(df)
debugSource('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/Final/Preprocessing.R')
df <- preprocessing(df)
debugSource('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/Final/Preprocessing.R')
df <- preprocessing(df)
source('C:/Users/robin/Desktop/workspace/GitHub/Skaizen/Final/Preprocessing.R')
library(keras)
df <- preprocessing(df)
library(keras)
library(lime)
library(dplyr)
data_raw = df
data_tbl <- select(data_raw, -c("text", "time"))
set.seed(100)
train_test_split <- initial_split(data_tbl, prop = 0.8)
train_test_split
train_tbl <- training(train_test_split)
test_tbl  <- testing(train_test_split)
x_train <- select(train_tbl, -c("views")) %>% as.matrix()
x_test <- select(test_tbl, -c("views")) %>% as.matrix()
y_train <- train_tbl$views
y_test <- test_tbl$views
model <- keras_model_sequential()
model %>%
layer_dense(units = round(ncol(x_train)*1.2), activation = "relu", input_shape = c(ncol(x_train))) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 1, activation = "relu")
summary(model)
model %>% compile(
loss = "mean_absolute_error",
optimize = "sgd",
metrics = c("accuracy")
)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
plot(history)
model %>% evaluate(x_test, y_test)
# Setup lime::model_type() function for keras
model_type.keras.models.Sequential <- function(x, ...) {
return("classification")
}
# Setup lime::predict_model() function for keras
predict_model.keras.models.Sequential <- function(x, newdata, type, ...) {
pred <- predict_proba(object = x, x = as.matrix(newdata))
return(data.frame(Yes = pred, No = 1 - pred))
}
# Test our predict_model() function
predict_model(x = model_keras, newdata = x_test_tbl, type = 'raw') %>%
tibble::as_tibble()
# Run lime() on training set
explainer <- lime::lime(
x              = x_train_tbl,
model          = model_keras,
bin_continuous = FALSE)
# Run explain() on explainer
explanation <- lime::explain(
x_test_tbl[1:10,],
explainer    = explainer,
n_labels     = 1,
n_features   = 4,
kernel_width = 0.5)
plot_features(explanation) +
labs(title = "LIME Feature Importance Visualization",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
plot_explanations(explanation) +
labs(title = "LIME Feature Importance Heatmap",
subtitle = "Hold Out (Test) Set, First 10 Cases Shown")
# Feature correlations to Churn
corrr_analysis <- data.frame(x_train) %>%
mutate(views = y_train) %>%
correlate() %>%
focus(views) %>%
rename(feature = rowname) %>%
arrange(abs(views)) %>%
mutate(feature = as_factor(feature))
corrr_analysis
# Correlation visualization
corrr_analysis %>%
ggplot(aes(x = views, y = fct_reorder(feature, desc(views)))) +
geom_point() +
# Positive Correlations - more views
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
geom_point(color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
# Negative Correlations - less views
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
geom_point(color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
# Vertical lines
geom_vline(xintercept = 0, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = -0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = 0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
# Aesthetics
theme_tq() +
labs(title = "Keywords/Views Correlation Analysis",
subtitle = "Positive Correlations (more views), Negative Correlations (less views)",
y = "Feature Importance") +
theme(text = element_text(size=8))
# Correlation visualization
corrr_analysis %>%
ggplot(aes(x = views, y = fct_reorder(feature, desc(views)))) +
geom_point() +
# Positive Correlations - more views
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
geom_point(color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
# Negative Correlations - less views
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
geom_point(color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
# Vertical lines
geom_vline(xintercept = 0, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = -0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = 0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
# Aesthetics
theme_tq() +
labs(title = "Keywords/Views Correlation Analysis",
subtitle = "Positive Correlations (more views), Negative Correlations (less views)",
y = "Feature Importance") +
theme(text = element_text(size=8))
library(ggplot)
# Correlation visualization
corrr_analysis %>%
ggplot(aes(x = views, y = fct_reorder(feature, desc(views)))) +
geom_point() +
# Positive Correlations - more views
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
geom_point(color = palette_light()[[2]],
data = corrr_analysis %>% filter(views > 0)) +
# Negative Correlations - less views
geom_segment(aes(xend = 0, yend = feature),
color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
geom_point(color = palette_light()[[1]],
data = corrr_analysis %>% filter(views < 0)) +
# Vertical lines
geom_vline(xintercept = 0, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = -0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
geom_vline(xintercept = 0.25, color = palette_light()[[5]], size = 1, linetype = 2) +
# Aesthetics
theme_tq() +
labs(title = "Keywords/Views Correlation Analysis",
subtitle = "Positive Correlations (more views), Negative Correlations (less views)",
y = "Feature Importance") +
theme(text = element_text(size=8))
library(ggplot2)
library(ggplot)
